name: Weather and Carbon Data Scraper

on:
  schedule:
    - cron: '0 * * * *'  # Every hour (UTC)
  workflow_dispatch:

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pandas requests gspread oauth2client
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Run data scraper
      run: python updated.py
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
    
    - name: Commit and push changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          git add weather_data.csv
          git commit -m "Update weather and carbon data - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push
          echo "Changes committed and pushed successfully"
        else
          echo "No changes to commit"
        fi
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
    
    - name: Set up Google Sheets credentials
      run: |
        echo "$GSHEETS_CREDENTIALS_JSON" > credentials.json
        chmod 600 credentials.json
        echo "✅ Credentials file created and permissions set"
      env:
        GSHEETS_CREDENTIALS_JSON: ${{ secrets.GSHEETS_CREDENTIALS_JSON }}
    
    - name: Upload to Google Sheets
      run: |
        python - <<'EOF'
        import gspread
        import pandas as pd
        import sys
        import json
        import os
        from oauth2client.service_account import ServiceAccountCredentials
        
        try:
            # Verify credentials file exists and is valid JSON
            if not os.path.exists("credentials.json"):
                print("❌ Error: credentials.json file not found")
                sys.exit(1)
            
            # Test JSON parsing
            try:
                with open("credentials.json", 'r') as f:
                    creds_data = json.load(f)
                print("✅ Credentials JSON loaded successfully")
            except json.JSONDecodeError as e:
                print(f"❌ Error: Invalid JSON in credentials file: {str(e)}")
                sys.exit(1)
            
            # Authenticate with Google Sheets
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
            creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
            client = gspread.authorize(creds)
            print("✅ Google Sheets authentication successful")
            
            # Load and validate data
            try:
                df = pd.read_csv("weather_data.csv")
                if df.empty:
                    print("⚠️  Warning: CSV file is empty")
                    sys.exit(1)
                print(f"📊 Loaded {len(df)} rows of data")
            except FileNotFoundError:
                print("❌ Error: weather_data.csv not found")
                sys.exit(1)
            except pd.errors.EmptyDataError:
                print("❌ Error: CSV file is empty or corrupted")
                sys.exit(1)
            
            # Update Google Sheet
            try:
                spreadsheet = client.open("Weather and Carbon Dashboard")
                worksheet = spreadsheet.worksheet("LiveData")
                
                # Clear existing data
                worksheet.clear()
                
                # Prepare data for upload
                data_to_upload = [df.columns.values.tolist()] + df.values.tolist()
                
                # Upload data in batches to avoid API limits
                worksheet.update(data_to_upload, value_input_option='RAW')
                
                print("✅ Successfully synced to Google Sheets")
                print(f"📈 Updated {len(df)} rows with {len(df.columns)} columns")
                
            except gspread.SpreadsheetNotFound:
                print("❌ Error: Spreadsheet 'Weather and Carbon Dashboard' not found")
                sys.exit(1)
            except gspread.WorksheetNotFound:
                print("❌ Error: Worksheet 'LiveData' not found")
                sys.exit(1)
            except Exception as e:
                print(f"❌ Error updating Google Sheets: {str(e)}")
                sys.exit(1)
                
        except Exception as e:
            print(f"❌ Authentication or setup error: {str(e)}")
            sys.exit(1)
        EOF
      env:
        GSHEETS_CREDENTIALS_JSON: ${{ secrets.GSHEETS_CREDENTIALS_JSON }}
    
    - name: Clean up credentials
      if: always()
      run: |
        if [ -f credentials.json ]; then
          rm -f credentials.json
          echo "🧹 Cleaned up credentials file"
