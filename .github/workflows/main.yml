name: Weather and Carbon Data Scraper

on:
  schedule:
    - cron: '0 * * * *'  # Every hour (UTC)
  workflow_dispatch:

jobs:
  run-scraper:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install pandas requests gspread oauth2client numpy
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Run data scraper
      run: python updated.py
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
    
    - name: Commit and push changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          git add weather_data.csv
          git commit -m "Update weather and carbon data - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          git push
          echo "Changes committed and pushed successfully"
        else
          echo "No changes to commit"
        fi
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
    
    - name: Set up Google Sheets credentials
      run: |
        echo "$GSHEETS_CREDENTIALS_JSON" > credentials.json
        chmod 600 credentials.json
        echo "✅ Credentials file created and permissions set"
      env:
        GSHEETS_CREDENTIALS_JSON: ${{ secrets.GSHEETS_CREDENTIALS_JSON }}
    
    - name: Create Google Sheets upload script
      run: |
        cat > upload_to_sheets.py << 'EOF'
        import gspread
        import pandas as pd
        import sys
        import json
        import os
        import numpy as np
        from oauth2client.service_account import ServiceAccountCredentials
        
        try:
            # Verify credentials file exists and is valid JSON
            if not os.path.exists("credentials.json"):
                print("❌ Error: credentials.json file not found")
                sys.exit(1)
            
            # Test JSON parsing
            try:
                with open("credentials.json", 'r') as f:
                    creds_data = json.load(f)
                print("✅ Credentials JSON loaded successfully")
            except json.JSONDecodeError as e:
                print(f"❌ Error: Invalid JSON in credentials file: {str(e)}")
                sys.exit(1)
            
            # Authenticate with Google Sheets
            scope = [
                "https://spreadsheets.google.com/feeds",
                "https://www.googleapis.com/auth/drive"
            ]
            creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
            client = gspread.authorize(creds)
            print("✅ Google Sheets authentication successful")
            
            # Load and validate data
            try:
                df = pd.read_csv("weather_data.csv")
                if df.empty:
                    print("⚠️  Warning: CSV file is empty")
                    sys.exit(1)
                print(f"📊 Loaded {len(df)} rows of data")
                print(f"📋 Columns: {list(df.columns)}")
            except FileNotFoundError:
                print("❌ Error: weather_data.csv not found")
                sys.exit(1)
            except pd.errors.EmptyDataError:
                print("❌ Error: CSV file is empty or corrupted")
                sys.exit(1)
            
            # Clean the data to handle non-JSON compliant values
            print("🧹 Cleaning data for JSON compliance...")
            
            # Check for problematic values before cleaning
            nan_count = df.isna().sum().sum()
            inf_count = np.isinf(df.select_dtypes(include=[np.number])).sum().sum()
            print(f"🔍 Found {nan_count} NaN values and {inf_count} infinite values")
            
            # Replace inf and -inf with None
            df = df.replace([np.inf, -np.inf], None)
            
            # Replace NaN with None (which becomes null in JSON)
            df = df.where(pd.notnull(df), None)
            
            # Check for any remaining problematic values
            problematic_columns = []
            for col in df.columns:
                if df[col].dtype in ['float64', 'float32']:
                    if df[col].isin([np.inf, -np.inf]).any():
                        problematic_columns.append(col)
            
            if problematic_columns:
                print(f"⚠️  Warning: Still found inf values in columns: {problematic_columns}")
            else:
                print("✅ Data cleaning completed - no problematic values found")
            
            # Update Google Sheet
            try:
                spreadsheet = client.open("Weather and Carbon Dashboard")
                worksheet = spreadsheet.worksheet("LiveData")
                print("📊 Connected to Google Sheet successfully")
                
                # Clear existing data
                worksheet.clear()
                print("🧹 Cleared existing data")
                
                # Prepare data for upload - convert to strings for safer handling
                headers = df.columns.values.tolist()
                
                # Convert DataFrame to list of lists, handling None values properly
                data_rows = []
                for idx, row in df.iterrows():
                    row_data = []
                    for value in row:
                        if value is None or pd.isna(value):
                            row_data.append('')  # Empty string for Google Sheets
                        elif isinstance(value, (int, float)):
                            if not np.isfinite(value):
                                row_data.append('N/A')  # Handle any remaining non-finite values
                            else:
                                row_data.append(value)  # Keep numeric values as-is
                        else:
                            row_data.append(str(value))  # Convert to string for safety
                    data_rows.append(row_data)
                
                data_to_upload = [headers] + data_rows
                print(f"📤 Preparing to upload {len(data_rows)} rows with {len(headers)} columns")
                
                # Upload data with better error handling
                try:
                    worksheet.update(data_to_upload, value_input_option='USER_ENTERED')
                    print("✅ Successfully synced to Google Sheets")
                    print(f"📈 Updated {len(df)} rows with {len(df.columns)} columns")
                except Exception as upload_error:
                    # If USER_ENTERED fails, try RAW with all strings
                    print(f"⚠️  USER_ENTERED failed: {str(upload_error)}")
                    print("🔄 Retrying with all values as strings...")
                    
                    # Convert everything to strings as fallback
                    string_data = []
                    for row in data_to_upload:
                        string_row = [str(item) if item is not None else '' for item in row]
                        string_data.append(string_row)
                    
                    worksheet.update(string_data, value_input_option='RAW')
                    print("✅ Successfully synced to Google Sheets (string fallback)")
                    print(f"📈 Updated {len(df)} rows with {len(df.columns)} columns")
                
            except gspread.SpreadsheetNotFound:
                print("❌ Error: Spreadsheet 'Weather and Carbon Dashboard' not found")
                print("💡 Make sure the spreadsheet exists and the service account has access")
                sys.exit(1)
            except gspread.WorksheetNotFound:
                print("❌ Error: Worksheet 'LiveData' not found")
                print("💡 Make sure the worksheet 'LiveData' exists in your spreadsheet")
                sys.exit(1)
            except Exception as e:
                print(f"❌ Error updating Google Sheets: {str(e)}")
                print(f"🔍 Error type: {type(e).__name__}")
                sys.exit(1)
                
        except Exception as e:
            print(f"❌ Authentication or setup error: {str(e)}")
            print(f"🔍 Error type: {type(e).__name__}")
            sys.exit(1)
        EOF
    
    - name: Upload to Google Sheets
      run: python upload_to_sheets.py
      env:
        GSHEETS_CREDENTIALS_JSON: ${{ secrets.GSHEETS_CREDENTIALS_JSON }}
    
    - name: Clean up credentials and temp files
      if: always()
      run: |
        if [ -f credentials.json ]; then
          rm -f credentials.json
          echo "🧹 Cleaned up credentials file"
        fi
        if [ -f upload_to_sheets.py ]; then
          rm -f upload_to_sheets.py
          echo "🧹 Cleaned up upload script"
        fi
